
services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cmt
      POSTGRES_USER: cmt
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set POSTGRES_PASSWORD in .env.prod}
      # AÃ±ade esto para que psql no pida password en el healthcheck:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      # En vez de pg_isready sin usuario, ejecuta un SELECT 1 autenticado
      test: ["CMD-SHELL", "psql -U cmt -d cmt -h 127.0.0.1 -p 5432 -c 'SELECT 1' >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  backend:
    build: ./app/backend
    command: >
      uvicorn main:app --host 0.0.0.0 --port 8000
      --proxy-headers --forwarded-allow-ips="*"
    environment:
      DATABASE_URL: postgresql+psycopg2://cmt:${POSTGRES_PASSWORD}@db:5432/cmt
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      FORWARDED_ALLOW_IPS: "*"
    env_file:
      - ./.env.prod
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request; urllib.request.urlopen('http://localhost:8000/healthz', timeout=3).read(); print('ok')\nPY"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 25s

  worker:
    build: ./app/backend
    command: >
      celery -A core.celery_worker.celery_app worker
      -c ${CELERY_CONCURRENCY:-8}
      --prefetch-multiplier=${CELERY_PREFETCH:-1}
      -Ofair
      --loglevel=${CELERY_LOGLEVEL:-info}
    environment:
      PYTHONPATH: /app
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      DATABASE_URL: postgresql+psycopg2://cmt:${POSTGRES_PASSWORD}@db:5432/cmt
      REDIS_URL: redis://redis:6379/0
    env_file:
      - ./.env.prod
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  beat:
    build: ./app/backend
    command: >
      celery -A core.celery_worker.celery_app beat
      --loglevel=info
    environment:
      PYTHONPATH: /app
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      DATABASE_URL: postgresql+psycopg2://cmt:${POSTGRES_PASSWORD}@db:5432/cmt
      REDIS_URL: redis://redis:6379/0
    env_file:
      - ./.env.prod
    depends_on:
      worker:
        condition: service_started
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "443:443"
      # - "80:80"
    volumes:
      - ./app/frontend/dist:/usr/share/nginx/html:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  db-data:
